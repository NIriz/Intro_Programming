#1
Given a hash of family members, with keys as the title and an array of names as the values, use Ruby's built-in select method to gather only immediate family members' names into a new array.

family = {  uncles: ["bob", "joe", "steve"],
            sisters: ["jane", "jill", "beth"],
            brothers: ["frank","rob","david"],
            aunts: ["mary","sally","susan"]
          }


immediate = family.select { |k,v| k == :sisters || k == :brothers}



#2
Look at Ruby's merge method. Notice that it has two versions. What is the difference between merge and merge!? Write a program that uses both and illustrate the differences

merge! modifies permanently whatever it's being called on, merge doesn't.

young = {marla: 12, bob: 9, kev: 18}
old = {beth: 39, rich: 76, gab: 908}

p young.merge!(old)

good = {food: 'tacos', colors: 'black', hair: 'big'}
bad = {trains: 'G', seasons: 'winter', food: 'liver'}

p good.merge(bad)

p young
p old
p good
p bad



#3
Using some of Ruby's built-in Hash methods, write a program that loops through a hash and prints all of the keys. Then write a program that does the same thing except printing the values. Finally, write a program that prints both.

person = {name: 'bob', height: '6ft', weight: '160 lbs', hair: 'brown'}

person.values
person.keys
person.each do |key, value|
  puts "Bob's #{key} is #{value}"
end  



#4
Given the following expression, how would you access the name of the person?

person = {name: 'Bob', occupation: 'web developer', hobbies: 'painting'}

person[:name]



#5
What method could you use to find out if a Hash contains a specific value in it? Write a program to demonstrate this use.

person.has_value?('Bob')



#6
Given the array...

words =  ['demo', 'none', 'tied', 'evil', 'dome', 'mode', 'live',
          'fowl', 'veil', 'wolf', 'diet', 'vile', 'edit', 'tide',
          'flow', 'neon']

Write a program that prints out groups of words that are anagrams. Anagrams are words that have the same exact letters in them but in a different order.

ana = {}

words.each do |word|
  key = word.split('').sort.join
  if ana.has_key?(key)
    ana[key].push(word)
  else
    ana[key] = [word]
  end
end

ana.each do |k, v|
  p v
end

REVIEW



#7
Given the following code...

x = "hi there"
my_hash = {x: "some value"}
my_hash2 = {x => "some value"}

What's the difference between the two hashes that were created?
I think in the first one 'x' will remain 'x' and not be associated with "hi there"
because it is a symbol, the second one = {'hi there' => 'some value'}



#8
If you see this error, what do you suspect is the most likely problem?

NoMethodError: undefined method `keys' for Array

A. We're missing keys in an array variable.

B. There is no method called keys for Array objects.

C. keys is an Array object, but it hasn't been defined yet.

D. There's an array of strings, and we're trying to get the string keys out of the array, but it doesn't exist.

Answer: B

